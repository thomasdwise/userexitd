--- /opt/tivoli/tsm/server/bin/userExitSample.c	2003-06-13 21:44:01.000000000 +0400
+++ userexit.c	2005-11-01 00:10:29.000000000 +0300
@@ -1,3 +1,4 @@
+/* ED: Modified for userexitd  */
 /***********************************************************************
 * ADSTAR Distributed Storage Manager (adsm)                            * 
 * Server Component                                                     *
@@ -17,19 +18,34 @@
  *                  *********************************************
  *
  ***********************************************************************/
-
+#include <errno.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <sys/types.h>
 #include <stdio.h>
 #include "userExitSample.h"
 
+#ifndef DEFSOCKET
+#define DEFSOCKET "unix:/var/run/userexitd.sock"
+#endif
+
+#define SOCKPATH_VAR "USEREXITD_ADDRESS"
+#define MAXWAIT 3
+#if 0
+#define DEBUG
+#endif
 /**************************************
  *** Do not modify below this line. ***
  **************************************/
  
-extern void adsmV3UserExit( void *anEvent );
+/*extern void adsmV3UserExit( void *anEvent );*/
 
 /************
  *** Main ***
  ************/
+static int sock=0;
+static struct sockaddr_un my_addr;
+static struct sockaddr *my_addr_p=(struct sockaddr*)&my_addr;
 
 int main(int argc, char *argv[])
 {
@@ -54,19 +70,22 @@
 {
 /* Typecast the event data passed */
 elEventRecvData *eventData = (elEventRecvData *)anEvent;
+time_t st;
 
 /**************************************
  *** Do not modify above this line. ***
  **************************************/
-
+if (!eventData) {
+	return;
+}
 if( ( eventData->eventNum == USEREXIT_END_EVENTNUM     ) ||
     ( eventData->eventNum == END_ALL_RECEIVER_EVENTNUM ) )
   {
    /* Server says to end this user-exit.  Perform any cleanup, *
     * but do NOT exit() !!!                                    */
+	
    return;
   }
-
 /* Field Access:  eventData->.... */
 /* Your code here ... */
 
@@ -77,7 +96,65 @@
  * Also avoid any functions that are not thread-safe.  Consult your 
  * system's programming reference material for more information.
  */
-
+  st=time(NULL);
+  do {
+	  if (-1== sendto(sock,(void*)anEvent,sizeof(struct evRdata),
+			MSG_DONTWAIT|MSG_NOSIGNAL,my_addr_p,sizeof(my_addr))) {
+	  	if ((EAGAIN!=errno) && (EWOULDBLOCK!=errno)) {
+#ifdef DEBUG
+	  		perror("sendto");
+#endif
+			break;
+#ifdef DEBUG
+	  	} else {
+
+			fprintf(stderr," RETRY! ");
+#endif
+		}
+	  } else {
+		  break;
+	  }
+	  if ((time(NULL)-st)>MAXWAIT) {
+#ifdef DEBUG
+		  fprintf(stderr," GIVE UP! ");
+#endif
+		  break;
+	  }
+  } while(1);
 return; /* For picky compilers */
 } /* End of adsmV3UserExit() */
 
+void _init(void) {
+  char *spath=DEFSOCKET;
+  fprintf(stderr,"\nuserexit: Initializing\n");
+  if (getenv(SOCKPATH_VAR)) {
+    spath=getenv(SOCKPATH_VAR);
+  }
+  if (strncmp(spath,"unix:",5)) {
+    fprintf(stderr,"userexit: ERROR: incorrect address: '%s', userexit disabled!\n",spath);
+    sock=0;
+    return;
+  } 
+  fprintf(stderr,"userexit: messages will go to %s\n",spath);
+  if (!sock) {
+	my_addr.sun_family=AF_UNIX;
+	strcpy(my_addr.sun_path,spath+5);
+	sock = socket(PF_UNIX, SOCK_DGRAM, 0); 
+	if (sock==-1) {
+	  fprintf(stderr,"userexit: ERROR: socket call failed!");
+	  sock=0;
+	  return;
+	} 
+  }
+  fprintf(stderr,"userexit: initialized\n");
+}
+
+void _fini(void) {
+	fprintf(stderr,"\nUnloading user exit\n");
+	if (sock) {
+		close(sock);
+		sock=0;
+	}
+}
+
+
